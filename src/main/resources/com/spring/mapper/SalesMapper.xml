<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.SalesMapper">

	<!-- 판매상품 리스트 -->
	<select id="salesList" resultType="com.spring.domain.SalesVO">
		select
		center_fk,pt_fk,pt_nm,unit,origin_nm,storage_nm,tax_nm,sale_cost,exp_D,exp_T
		from productcon_tb left join
		(select
		origin_nm,unit,pt_cd,pt_nm,storage_nm,tax_nm,cate_nm from product_tb
		left join storage_tb on storage_fk=storage_cd
		left join tax_tb on
		tax_fk=tax_cd
		left join category_tb on cate_cd=category_fk
		left join
		origin_tb on origin_cd=origin_fk) on pt_fk=pt_cd
	</select>

	<!-- 판매처 리스트 -->
	<select id="customerList"
		resultType="com.spring.domain.CustomerVO">
		select /*+INDEX_DESC(customer_tb pk_customer_tb)*/rownum
		rn, customer_cd,
		pre_nm, customer_rcd, customer_nm, c.address,
		center_fk, emp_nm from
		customer_tb c
		left join emp_tb e on c.emp_fk =
		e.emp_cd
	</select>

	<!-- 판매처 검색 -->
	<select id="customerSearch"
		resultType="com.spring.domain.CustomerVO">
		select customer_cd , customer_NM,pre_NM,Address,center_FK
		from
		customer_tb
		where
		<if test="criteria=='customer_NM'">
			customer_nm Like '%'||#{keyword}||'%'
		</if>
		<if test="criteria=='customer_cd'">
			customer_cd Like '%'||#{keyword}||'%'
		</if>
	</select>

	<select id="center_ptList"
		resultType="com.spring.domain.Center_ptVO">
		select
		center_fk,ptcon_cd,pt_cd,pt_NM,unit,origin_NM,storage_NM,tax_NM,sale_cost,sale_cost*tax_fk*0.1
		tax,(sale_cost*tax_fk*0.1)+sale_cost total,p.exp_d exp_d
		,exp_t,creditor_fk from productcon_tb p
		left join (
		select * from
		product_tb
		left join origin_tb on origin_fk = origin_cd
		left join
		storage_tb on storage_fk = storage_cd
		left join tax_tb on tax_fk =
		tax_cd
		)on pt_fk = pt_cd
		where center_fk =
		(select center_fk from
		customer_tb
		where customer_cd = #{customer_cd})
		and (select to_number(to_char(sysdate+#{day}+p.exp_D,'YYYYMMDD'))from
		dual)
		<![CDATA[
		<=#{delivery} order by exp_d,pt_cd
			]]>
	</select>

	<insert id="cart_add">
		insert into cart_tb values
		(#{customer_pk},(select to_date(#{delivery_date},'YYYY-MM-DD')-#{exp} from dual),#{ptcon_fk},#{delivery_date},#{amount},
		#{supply_price},
		#{vat},
		#{column5})
	</insert>
	
	<update id="cart_update">
	update cart_tb 
	set amount=#{amount} ,supply_price=#{supply_price}*#{amount} ,
	 vat =#{supply_price}*#{amount}*(select tax_cd from tax_tb where tax_NM=#{tax_NM})*0.1,
	 column5=(#{supply_price}+(#{supply_price}*(select tax_cd from tax_tb where tax_NM='과세')*0.1))*#{amount}
	 where ptcon_fk = #{ptcon_fk} and customer_pk = #{customer_pk} and exp_D=#{exp_D}
	</update>
	
	<delete id="cart_delete">
	delete from cart_tb where ptcon_fk = #{ptcon_fk} and customer_pk = #{customer_pk} and delivery_date=#{delivery_date}
	</delete>
	 
	<select id="cart_List" resultType="com.spring.domain.CartVO">
	select customer_pk,ptcon_fk,(select to_char(c.delivery_date,'YYYY-MM-DD') from dual) delivery_date,(select to_char(c.exp_d,'YYYY-MM-DD')from dual) exp_D,amount,supply_price,vat,column5,origin_nm,center_fk,unit,pt_cd,pt_nm,storage_nm,sale_cost,tax_nm,cate_nm,creditor_fk  from cart_tb c 
left join(select * from productcon_tb left join (select origin_nm,unit,pt_cd,pt_nm,storage_nm,tax_nm,cate_nm from product_tb
left join storage_tb on storage_fk=storage_cd
left join tax_tb on tax_fk=tax_cd
left join category_tb on cate_cd=category_fk
left join origin_tb on origin_cd=origin_fk)on pt_cd = pt_fk)on ptcon_fk = ptcon_cd
where customer_pk = #{customer_pk} order by delivery_date
	</select>
	
	<!-- 고객사 신규 등록 -->
	<insert id="insert_cu">
		insert into customer_tb(customer_cd, pre_NM, customer_rcd, customer_NM, address, center_FK, emp_fk, email, password) 
		values(CU_CD.NEXTVAL,#{pre_NM},#{customer_rcd},#{customer_NM},#{address},#{center_FK}, (select emp_cd from emp_tb where emp_NM=#{emp_NM}),#{email},#{password})
	</insert> 
	
	<!-- 고객사 수정 등록-->
	<update id="update_cu">
		update customer_tb 
		set pre_NM=#{pre_NM}, customer_rcd=#{customer_rcd}, customer_NM=#{customer_NM}, address=#{address}, center_FK=#{center_FK}, emp_fk=(select emp_cd from emp_tb where emp_NM=#{emp_NM}),email=#{email},password=#{password} 
		where customer_cd=#{customer_cd}
	</update>
	
	      <!-- 고객사 신규 가져오기 -->
      <select id="select_cu" resultType="com.spring.domain.CustomerVO">
         select * from customer_tb where customer_rcd = #{customer_rcd}
      </select>
      
      
      
      
      <!--  매출원장 -->
      <select id="sales_ledger" resultType="com.spring.domain.PdfVO">
   select  
ct.pre_nm pre_NM, 
ct.address adress,
ctb.customer_nm creditor_NM,
order_pk order_CD, 
ot.customer_fk customer_CD,
ct.creditor_NM customer_NM,
ptcon_pk, 
ot."date" regdate,
pd.pt_nm product_NM, 
pd.pt_cd product_CD,
creditor_fk creditor_CD,
ot.amount amount,
p.purchase_cost product_cost,
pd.unit unit,
pd.tax_fk tax,
p.center_fk center,
p.purchase_cost*ot.amount supply,
(p.purchase_cost*ot.amount)*tax_fk*0.1 tax_sum,
((p.purchase_cost*ot.amount)*tax_fk*0.1)+(p.purchase_cost*ot.amount) total,
p.sale_cost s_product_cost,
p.sale_cost*ot.amount s_supply,
(p.sale_cost*ot.amount)*tax_fk*0.1 s_tax_sum,
((p.sale_cost*ot.amount)*tax_fk*0.1)+(p.sale_cost*ot.amount) s_total


from order_detail_tb o, productcon_tb p, order_tb ot, product_tb pd, creditor_tb ct, customer_Tb ctb
where
o.ptcon_pk=p.ptcon_cd
and
o.order_pk=ot.order_cd
and
p.pt_fk=pd.pt_cd
and
p.creditor_fk=ct.creditor_cd
and
ctb.customer_cd=ot.customer_fk
      </select>
	
</mapper>